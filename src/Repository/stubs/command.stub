<?php

namespace App\Console\Commands;

use App\Models\Rbac\Permission\Permission;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\Route;
use Illuminate\Support\Str;

class CreatePermissions extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'rbac:create-permissions';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Command description';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return mixed
     */
    public function handle()
    {
        $routes = $this->getIndexRoutes();

        foreach ($routes as $route) {
            $this->storePermission($route);
        }
    }

    private function storePermission($route)
    {
        $str = $this->normalizePermission($route);

        if(! $this->permissionAlreadyExists($str)) {
            $permission = new Permission();
            $permission->controller = $this->getController($str);
            $permission->action = $this->getAction($str);
            $permission->slug = $this->getSlug($str);
            $permission->save();
        }
    }

    private function getIndexRoutes()
    {
        return collect(Route::getRoutes())
            ->map(function ($route) { return $route->getName(); })
            ->filter(function ($name) {
                return Str::contains($name, 'index') && ! Str::contains($name, 'manage-users');
            });
    }

    private function normalizePermission($route)
    {
        return explode('.', $route);
    }

    private function getController($str)
    {
        return $str[0];
    }

    private function getAction($str)
    {
        return $str[1];
    }

    private function getSlug($str)
    {
        return Str::slug($str[0] . '-' . $str[1], '-');
    }

    private function permissionAlreadyExists($str)
    {
        $permission = Permission::where('controller', $this->getController($str))->where('action', $this->getAction($str))->get();

        return !! count($permission);
    }
}
